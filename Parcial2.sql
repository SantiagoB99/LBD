-- MySQL Script generated by MySQL Workbench
-- Mon Jun 20 19:36:16 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema Parcial2
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `Parcial2` ;

-- -----------------------------------------------------
-- Schema Parcial2
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Parcial2` DEFAULT CHARACTER SET utf8 ;
USE `Parcial2` ;

-- -----------------------------------------------------
-- Table `Parcial2`.`Cargos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Parcial2`.`Cargos` ;

CREATE TABLE IF NOT EXISTS `Parcial2`.`Cargos` (
  `idCargo` INT NOT NULL AUTO_INCREMENT,
  `cargo` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`idCargo`),
  UNIQUE INDEX `cargo_UNIQUE` (`cargo` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Parcial2`.`Personas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Parcial2`.`Personas` ;

CREATE TABLE IF NOT EXISTS `Parcial2`.`Personas` (
  `dni` INT NOT NULL,
  `apellidos` VARCHAR(40) NOT NULL,
  `nombres` VARCHAR(40) NOT NULL,
  PRIMARY KEY (`dni`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Parcial2`.`Profesores`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Parcial2`.`Profesores` ;

CREATE TABLE IF NOT EXISTS `Parcial2`.`Profesores` (
  `dni` INT NOT NULL,
  `idCargo` INT NOT NULL,
  INDEX `fk_Profesores_Cargos_idx` (`idCargo` ASC),
  PRIMARY KEY (`dni`),
  CONSTRAINT `fk_Profesores_Cargos`
    FOREIGN KEY (`idCargo`)
    REFERENCES `Parcial2`.`Cargos` (`idCargo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Profesores_Personas1`
    FOREIGN KEY (`dni`)
    REFERENCES `Parcial2`.`Personas` (`dni`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Parcial2`.`Alumnos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Parcial2`.`Alumnos` ;

CREATE TABLE IF NOT EXISTS `Parcial2`.`Alumnos` (
  `dni` INT NOT NULL,
  `cx` CHAR(7) NOT NULL,
  PRIMARY KEY (`dni`),
  UNIQUE INDEX `cx_UNIQUE` (`cx` ASC),
  CONSTRAINT `fk_Alumnos_Personas1`
    FOREIGN KEY (`dni`)
    REFERENCES `Parcial2`.`Personas` (`dni`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Parcial2`.`Trabajos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Parcial2`.`Trabajos` ;

CREATE TABLE IF NOT EXISTS `Parcial2`.`Trabajos` (
  `idTrabajo` INT NOT NULL,
  `titulo` VARCHAR(100) NOT NULL,
  `duracion` INT NOT NULL DEFAULT 6,
  `area` VARCHAR(10) NOT NULL,
  `fechaPresentacion` DATE NOT NULL,
  `fechaAprobacion` DATE NOT NULL,
  `fechaFinalizacion` DATE NULL,
  PRIMARY KEY (`idTrabajo`),
  UNIQUE INDEX `titulo_UNIQUE` (`titulo` ASC),
  CHECK (area IN('Hardware','Redes','Software')))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Parcial2`.`RolesEnTrabajos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Parcial2`.`RolesEnTrabajos` ;

CREATE TABLE IF NOT EXISTS `Parcial2`.`RolesEnTrabajos` (
  `idTrabajo` INT NOT NULL,
  `dni` INT NOT NULL,
  `rol` VARCHAR(7) NOT NULL,
  `desde` DATE NOT NULL,
  `hasta` DATE NULL,
  `razon` VARCHAR(100) NULL,
  PRIMARY KEY (`idTrabajo`, `dni`),
  INDEX `fk_Profesores_has_Trabajos_Trabajos1_idx` (`idTrabajo` ASC),
  INDEX `fk_Profesores_has_Trabajos_Profesores1_idx` (`dni` ASC),
  CHECK (rol IN('Tutor', 'Cotutor', 'Jurado')),
  CONSTRAINT `fk_Profesores_has_Trabajos_Profesores1`
    FOREIGN KEY (`dni`)
    REFERENCES `Parcial2`.`Profesores` (`dni`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Profesores_has_Trabajos_Trabajos1`
    FOREIGN KEY (`idTrabajo`)
    REFERENCES `Parcial2`.`Trabajos` (`idTrabajo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Parcial2`.`AlumnosEnTrabajos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Parcial2`.`AlumnosEnTrabajos` ;

CREATE TABLE IF NOT EXISTS `Parcial2`.`AlumnosEnTrabajos` (
  `idTrabajo` INT NOT NULL,
  `dni` INT NOT NULL,
  `desde` DATE NOT NULL,
  `hasta` DATE NULL,
  `razon` VARCHAR(100) NULL,
  PRIMARY KEY (`idTrabajo`, `dni`),
  INDEX `fk_Alumnos_has_Trabajos_Trabajos1_idx` (`idTrabajo` ASC),
  INDEX `fk_Alumnos_has_Trabajos_Alumnos1_idx` (`dni` ASC),
  CONSTRAINT `fk_Alumnos_has_Trabajos_Alumnos1`
    FOREIGN KEY (`dni`)
    REFERENCES `Parcial2`.`Alumnos` (`dni`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Alumnos_has_Trabajos_Trabajos1`
    FOREIGN KEY (`idTrabajo`)
    REFERENCES `Parcial2`.`Trabajos` (`idTrabajo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Parcial2`.`Alumnos_has_Trabajos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Parcial2`.`Alumnos_has_Trabajos` ;

CREATE TABLE IF NOT EXISTS `Parcial2`.`Alumnos_has_Trabajos` (
  `Alumnos_dni` INT NOT NULL,
  `idTrabajo` INT NOT NULL,
  PRIMARY KEY (`Alumnos_dni`, `idTrabajo`),
  INDEX `fk_Alumnos_has_Trabajos_Trabajos2_idx` (`idTrabajo` ASC),
  INDEX `fk_Alumnos_has_Trabajos_Alumnos2_idx` (`Alumnos_dni` ASC),
  CONSTRAINT `fk_Alumnos_has_Trabajos_Alumnos2`
    FOREIGN KEY (`Alumnos_dni`)
    REFERENCES `Parcial2`.`Alumnos` (`dni`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Alumnos_has_Trabajos_Trabajos2`
    FOREIGN KEY (`idTrabajo`)
    REFERENCES `Parcial2`.`Trabajos` (`idTrabajo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Parcial2`.`AlumnosEnTrabajos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Parcial2`.`AlumnosEnTrabajos` ;

CREATE TABLE IF NOT EXISTS `Parcial2`.`AlumnosEnTrabajos` (
  `idTrabajo` INT NOT NULL,
  `dni` INT NOT NULL,
  `desde` DATE NOT NULL,
  `hasta` DATE NULL,
  `razon` VARCHAR(100) NULL,
  PRIMARY KEY (`idTrabajo`, `dni`),
  INDEX `fk_Alumnos_has_Trabajos1_Trabajos1_idx` (`idTrabajo` ASC),
  INDEX `fk_Alumnos_has_Trabajos1_Alumnos1_idx` (`dni` ASC),
  CONSTRAINT `fk_Alumnos_has_Trabajos1_Alumnos1`
    FOREIGN KEY (`dni`)
    REFERENCES `Parcial2`.`Alumnos` (`dni`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Alumnos_has_Trabajos1_Trabajos1`
    FOREIGN KEY (`idTrabajo`)
    REFERENCES `Parcial2`.`Trabajos` (`idTrabajo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


-- 2. Crear un procedimiento llamado DetalleRoles, que reciba un rango de años y que muestre: Año,
-- DNI, Apellidos, Nombres, Tutor, Cotutor y Jurado, donde Tutor, Cotutor y Jurado muestran la
-- cantidad de trabajos en los que un profesor participó en un trabajo con ese rol entre el rango de
-- fechas especificado. El listado se mostrará ordenado por el año, apellidos, nombres y DNI (se
-- pueden emplear vistas u otras estructuras para lograr la funcionalidad solicitada. Para obtener el
-- año de una fecha se puede emplear la función YEAR()) [30].

DROP PROCEDURE IF EXISTS DetalleRoles;

DELIMITER //
	CREATE PROCEDURE DetalleRoles(pAnioInicio INT, pAnioFin INT, OUT pMensaje VARCHAR(100))
	SALIR: BEGIN
		SELECT YEAR(RolesEnTrabajos.desde) as Anio, Personas.DNI as DNI, Personas.apellidos as Apellidos, Personas.nombres as Nombres, count(IF(RolesEnTrabajos.rol = 'Tutor', 1, null)) as Tutor, count(IF(RolesEnTrabajos.rol = 'Cotutor', 1, null)) as Cotutor, count(IF(RolesEnTrabajos.rol = 'Jurado', 1, null)) as Jurado
        FROM Personas INNER JOIN Profesores ON Personas.dni = Profesores.dni
        INNER JOIN RolesEnTrabajos ON Profesores.dni = RolesEnTrabajos.dni
        WHERE YEAR(RolesEnTrabajos.desde) BETWEEN pAnioInicio AND pAnioFin
        GROUP BY Anio, DNI, Apellidos, Nombres
        ORDER BY Anio DESC, Apellidos ASC, Nombres ASC, DNI DESC;

END //
DELIMITER ;

CALL DetalleRoles(2017, 2017, @mensaje);

-- Crear un procedimiento almacenado llamado NuevoTrabajo, para que agregue un trabajo
-- nuevo. El procedimiento deberá efectuar las comprobaciones necesarias (incluyendo que la
-- fecha de aprobación sea igual o mayor a la de presentación) y devolver los mensajes
-- correspondientes (uno por cada condición de error, y otro por el éxito) [15].

DROP PROCEDURE IF EXISTS NuevoTrabajo;

DELIMITER //
	CREATE PROCEDURE NuevoTrabajo(pIdTrabajo INT, pTitulo VARCHAR(100), pDuracion INT, pArea VARCHAR(10), pFechaPresentacion DATE, pFechaAprobacion DATE, pFechaFinalizacion DATE, OUT pMensaje VARCHAR(100))
	SALIR: BEGIN
		IF (pIdTrabajo IS NULL) OR (pTitulo IS NULL) OR (pDuracion IS NULL) OR (pArea IS NULL) OR (pFechaPresentacion IS NULL) OR (pFechaAprobacion IS NULL) THEN
		SET pMensaje = 'Error en los datos del Trabajo';
        LEAVE SALIR;
	ELSEIF (pFechaAprobacion < pFechaPresentacion) THEN
		SET pMensaje = 'La fecha aprobacion tiene que ser mayor o igual a la fecha de presentacion';
	ELSEIF EXISTS (SELECT * FROM Trabajos WHERE idTrabajo = pIdTrabajo) THEN
		SET pMensaje = 'Ya existe un trabajo con ese id';
        LEAVE SALIR;
        
	ELSE
		START TRANSACTION;
			INSERT INTO Trabajos VALUES (pIdTrabajo, pTitulo, pDuracion, pArea, pFechaPresentacion, pFechaAprobacion, pFechaFinalizacion);
            SET pMensaje = 'Trabajo agregado con éxito';
		COMMIT;		
    END IF;
END //
DELIMITER ;

-- Id Existente
CALL NuevoTrabajo(1, 'Sistema de Gestión de Presupuestación de Obras de Construcción', 6, 'Software', '2018-05-04', '2018-05-24', NULL, @mensaje);
SELECT @mensaje;

-- Id null
CALL NuevoTrabajo(null, 'Sistema de Gestión de Presupuestación de Obras de Construcción', 6, 'Software', '2018-05-04', '2018-05-24', NULL, @mensaje);
SELECT @mensaje;

-- Nombre null
CALL NuevoTrabajo(80, null, 6, 'Software', '2018-05-04', '2018-05-24', NULL, @mensaje);
SELECT @mensaje;

-- Duracion null
CALL NuevoTrabajo(80, 'Sistema de xxsadas', null, 'Software', '2018-05-04', '2018-05-24', NULL, @mensaje);
SELECT @mensaje;

-- Area null
CALL NuevoTrabajo(80, 'Sistema de xxsadas', 6, null, '2018-05-04', '2018-05-24', NULL, @mensaje);
SELECT @mensaje;

-- FechaPresentacion null
CALL NuevoTrabajo(80, 'Sistema de xxsadas', 6, 'Software', null, '2018-05-24', NULL, @mensaje);
SELECT @mensaje;

-- FechaAprobacion null
CALL NuevoTrabajo(80, 'Sistema de xxsadas', 6, 'Software', '2018-05-04', null, NULL, @mensaje);
SELECT @mensaje;

-- Fecha aprobacion menor a fecha presentacion
CALL NuevoTrabajo(80, 'Sistema de xxsadas', 6, 'Software', '2018-05-04', '2017-05-04', NULL, @mensaje);
SELECT @mensaje;

-- Creacion correcta
CALL NuevoTrabajo(80, 'Sistema de xxsadas', 6, 'Software', '2018-05-04', '2028-05-24', NULL, @mensaje);
SELECT @mensaje;

-- 4. Realizar un trigger, llamado AuditarTrabajos, para que cuando se agregue un trabajo con una
-- duración superior a los 12 meses, o inferior a 3 meses, registre en una tabla de auditoría los
-- detalles del trabajo (todos los campos de la tabla Trabajos), el usuario que lo agregó y la fecha
-- en la que lo hizo [15].

DROP TABLE IF EXISTS `AuditoriaTrabajos` ;

CREATE TABLE IF NOT EXISTS `AuditoriaTrabajos` (
    id INT NOT NULL AUTO_INCREMENT,
  `idTrabajo` INT NOT NULL,
  `titulo` VARCHAR(100) NOT NULL,
  `duracion` INT NOT NULL DEFAULT 6,
  `area` VARCHAR(10) NOT NULL,
  `fechaPresentacion` DATE NOT NULL,
  `fechaAprobacion` DATE NOT NULL,
  `fechaFinalizacion` DATE NULL,
  `usuario` VARCHAR(45) NOT NULL,
  `fecha` DATETIME NOT NULL,
  PRIMARY KEY (`id`)
);

DROP TRIGGER IF EXISTS AuditarTrabajos;

DELIMITER //
	CREATE TRIGGER AuditarTrabajos
		BEFORE INSERT ON Trabajos FOR EACH ROW
		BEGIN
			IF (NEW.duracion >12) OR (NEW.duracion <3) THEN
			INSERT INTO AuditoriaTrabajos VALUES (
				DEFAULT,
				NEW.idTrabajo,
				NEW.titulo,
				NEW.duracion,
				NEW.area,
				NEW.fechaPresentacion,
				NEW.fechaAprobacion,
                NEW.fechaFinalizacion,
				SUBSTRING_INDEX(USER(), '@', 1),
				NOW()
		);
        END IF;
	END //
DELIMITER ;

INSERT INTO Trabajos VALUES(100, 'Sadsas', 4, 'Software', '2018-05-04', '2018-05-24', NULL);
INSERT INTO Trabajos VALUES(102, 'sadsa', 2, 'Software', '2018-05-04', '2018-05-24', NULL);
INSERT INTO Trabajos VALUES(110, 'dasdasdsa', 13, 'Software', '2018-05-04', '2018-05-24', NULL);